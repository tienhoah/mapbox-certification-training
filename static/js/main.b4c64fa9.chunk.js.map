{"version":3,"sources":["apis/translink_routes.js","components/Mapbox.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","process","mapboxgl","accessToken","Mapbox","mapContainerRef","useRef","useEffect","map","Map","container","current","style","center","zoom","on","window","setInterval","translink_routes","get","then","res","busLocation","type","features","data","forEach","bus","markerPoint","geometry","coordinates","Longitude","Latitude","push","undefined","getSource","setData","addSource","addLayer","id","source","layout","remove","className","ref","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qTAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAQ,GAAD,OAAKC,4CAAL,mBAA6DA,uBAA7D,kBCETC,IAASC,YAAcF,iGAEvB,IAuDeG,EAvDA,WACb,IAAMC,EAAkBC,iBAAO,MAmD/B,OAjDAC,qBAAU,WACR,IAAMC,EAAM,IAAIN,IAASO,IAAI,CAC3BC,UAAWL,EAAgBM,QAC3BC,MAAO,wDACPC,OAAQ,EAAE,OAAQ,UAClBC,KAAM,KAyCR,OAtCAN,EAAIO,GAAG,QAAQ,WACbC,OAAOC,aAAY,WACjBC,EAAiBC,MAAMC,MAAK,SAACC,GAC3B,IAAMC,EAAc,CAClBC,KAAM,oBACNC,SAAU,IAEZH,EAAII,KAAKC,SAAQ,SAACC,GAChB,IAIMC,EAAc,CAAEL,KAAM,UAAWM,SAJrB,CAChBN,KAAM,QACNO,YAAa,CAACH,EAAII,UAAWJ,EAAIK,YAInCV,EAAYE,SAASS,KAAKL,WAGGM,IAA3B1B,EAAI2B,UAAU,UAChB3B,EAAI2B,UAAU,SAASC,QAAQd,QAGlC,KAEHd,EAAI6B,UAAU,QAAS,CACrBd,KAAM,UACNE,KAAM,CAAEF,KAAM,oBAAqBC,SAAU,MAG/ChB,EAAI8B,SAAS,CACXC,GAAI,MACJhB,KAAM,SACNiB,OAAQ,QACRC,OAAQ,CACN,aAAc,YAKb,kBAAMjC,EAAIkC,YAChB,IAEI,yBAAKC,UAAU,gBAAgBC,IAAKvC,KC9C9BwC,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCIcC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b4c64fa9.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: `${process.env.REACT_APP_TRANSLINK_BUSES_API_URL}?apikey=${process.env.REACT_APP_TRANSLINK_API_KEY}&routeNo=099`,\n});\n","import React, { useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport translink_routes from \"../apis/translink_routes\";\n// import Marker from \"./Marker\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\nconst Mapbox = () => {\n  const mapContainerRef = useRef(null);\n\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: \"mapbox://styles/nickhoang11/ckeaaht6x03hz19plpnhqkg6h\",\n      center: [-123.12, 49.26427],\n      zoom: 12,\n    });\n\n    map.on(\"load\", () => {\n      window.setInterval(() => {\n        translink_routes.get().then((res) => {\n          const busLocation = {\n            type: \"FeatureCollection\",\n            features: [],\n          };\n          res.data.forEach((bus) => {\n            const busLatLng = {\n              type: \"Point\",\n              coordinates: [bus.Longitude, bus.Latitude],\n            };\n            const markerPoint = { type: \"Feature\", geometry: busLatLng };\n\n            busLocation.features.push(markerPoint);\n          });\n\n          if (map.getSource(\"bus99\") !== undefined) {\n            map.getSource(\"bus99\").setData(busLocation);\n          }\n        });\n      }, 3000);\n\n      map.addSource(\"bus99\", {\n        type: \"geojson\",\n        data: { type: \"FeatureCollection\", features: [] },\n      });\n\n      map.addLayer({\n        id: \"bus\",\n        type: \"symbol\",\n        source: \"bus99\",\n        layout: {\n          \"icon-image\": \"bus\",\n        },\n      });\n    });\n\n    return () => map.remove();\n  }, []);\n\n  return <div className=\"map-container\" ref={mapContainerRef} />;\n};\n\nexport default Mapbox;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Mapbox from \"./components/Mapbox\";\n\nfunction App() {\n  return (\n    <>\n      <Mapbox />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}