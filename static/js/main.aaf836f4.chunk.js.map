{"version":3,"sources":["apis/translink_routes.js","components/Popup.js","components/UseInterval.js","components/Mapbox.js","components/SelectControl.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","process","ItemStyle","styled","span","Popup","feature","properties","vehicle_no","destination","direction","record_time","route_no","hrefNextBus","toLowerCase","id","target","href","UseInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","styles","width","height","position","Mapbox","currentRoute","mapContainer","popUpRef","mapboxgl","offset","useState","map","setMap","fetchBusRoute","useCallback","newRoute","translink_routes","get","params","apikey","routeNo","then","res","busLocation","type","features","data","forEach","bus","busCoordinates","Longitude","Latitude","markerPoint","geometry","coordinates","VehicleNo","RecordedTime","Direction","Destination","route_map","RouteMap","RouteNo","push","undefined","getSource","setData","on","e","getCanvas","style","cursor","slice","Math","abs","lngLat","lng","popupNode","document","createElement","ReactDOM","render","setLngLat","setDOMContent","addTo","accessToken","Map","container","center","zoom","addSource","url","tileSize","loadImage","error","image","addImage","addLayer","source","layout","visibility","getZoom","setLayoutProperty","flyTo","speed","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","initializeMap","useInterval","ref","el","useStyles","makeStyles","option","fontSize","marginRight","autoCompleteStyle","backGround","zIndex","background","top","right","SelectControl","allRoutes","updateBusRoute","classes","value","setValue","options","setOptions","length","className","Autocomplete","autoHighlight","onChange","event","val","label","getOptionLabel","renderOption","renderInput","TextField","variant","inputProps","autoComplete","Main","state","availableRoutes","route","setState","allBuses","activeBuses","uniqBuses","Set","uniqBusLabels","this","Component","App","Boolean","window","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.aaf836f4.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: `${process.env.REACT_APP_TRANSLINK_BUSES_API_URL}`,\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ItemStyle = styled.span`\n  text-decoration: underline;\n`;\n\nconst Popup = ({ feature }) => {\n  const {\n    vehicle_no,\n    destination,\n    direction,\n    record_time,\n    route_no,\n  } = feature.properties;\n\n  const hrefNextBus = `https://new.translink.ca/next-bus/results/#/text/route/${route_no}/direction/${direction.toLowerCase()}`;\n\n  return (\n    <div id={`popup-${vehicle_no}`}>\n      <h3>Vehicle Number-{vehicle_no}</h3>\n      <div>\n        <ItemStyle>Bus No:</ItemStyle> <strong>{route_no}</strong>\n      </div>\n      <div>\n        <ItemStyle>Destination:</ItemStyle> {destination}\n      </div>\n      <div>\n        <ItemStyle>Direction:</ItemStyle> {direction}\n      </div>\n      <div>\n        <ItemStyle>Record Time:</ItemStyle> {record_time}\n      </div>\n      <div>\n        <a target=\"_\" href={hrefNextBus}>\n          <span>Click to track next {route_no} bus</span>{\" \"}\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Popup;\n","import { useRef, useEffect } from \"react\";\n\nconst UseInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default UseInterval;\n","import ReactDOM from \"react-dom\";\nimport React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport translink_routes from \"../apis/translink_routes\";\nimport PopupComp from \"./Popup\";\nimport useInterval from \"./UseInterval\";\n\nconst styles = {\n  width: \"100vw\",\n  height: \"100vh\",\n  position: \"absolute\",\n};\n\nconst Mapbox = ({ currentRoute }) => {\n  const mapContainer = useRef(null);\n  const popUpRef = useRef(new mapboxgl.Popup({ offset: 10 }));\n  const [map, setMap] = useState(null);\n\n  const fetchBusRoute = useCallback(function (map, newRoute) {\n    translink_routes\n      .get(\"\", {\n        params: {\n          apikey: process.env.REACT_APP_TRANSLINK_API_KEY,\n          routeNo: newRoute,\n        },\n      })\n      .then((res) => {\n        const busLocation = {\n          type: \"FeatureCollection\",\n          features: [],\n        };\n        res.data.forEach((bus) => {\n          const busCoordinates = [bus.Longitude, bus.Latitude];\n          const busGeoData = {\n            vehicle_no: bus.VehicleNo,\n            record_time: bus.RecordedTime,\n            direction: bus.Direction,\n            destination: bus.Destination,\n            coordinates: busCoordinates,\n            route_map: bus.RouteMap,\n            route_no: bus.RouteNo,\n          };\n          const busLatLng = {\n            type: \"Point\",\n            coordinates: busCoordinates,\n          };\n          const markerPoint = {\n            type: \"Feature\",\n            geometry: busLatLng,\n            properties: busGeoData,\n          };\n\n          busLocation.features.push(markerPoint);\n        });\n\n        if (map.getSource(\"bus\") !== undefined) {\n          map.getSource(\"bus\").setData(busLocation);\n        }\n      });\n\n    map.on(\"mouseenter\", \"bus\", function (e) {\n      map.getCanvas().style.cursor = \"pointer\";\n      const coordinates = e.features[0].geometry.coordinates.slice();\n\n      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n      }\n\n      const popupNode = document.createElement(\"div\");\n      ReactDOM.render(<PopupComp feature={e.features[0]} />, popupNode);\n\n      popUpRef.current\n        .setLngLat(coordinates)\n        .setDOMContent(popupNode)\n        .addTo(map);\n    });\n\n    map.on(\"mouseleave\", \"bus\", function () {\n      map.getCanvas().style.cursor = \"\";\n    });\n  }, []);\n\n  useEffect(() => {\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\n    const initializeMap = ({ setMap, mapContainer }) => {\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/nickhoang11/ckeaaht6x03hz19plpnhqkg6h\",\n        center: [-122.98, 49.26427],\n        zoom: 11,\n      });\n\n      map.on(\"load\", () => {\n        setMap(map);\n        map.addSource(\"satellite-map\", {\n          type: \"raster\",\n          url: \"mapbox://mapbox.satellite\",\n          tileSize: 256,\n        });\n\n        map.loadImage(\n          \"https://upload.wikimedia.org/wikipedia/commons/c/c4/Translinkbus.png\",\n          function (error, image) {\n            if (error) throw error;\n            map.addImage(\"blue-bus\", image);\n            map.addSource(\"bus\", {\n              type: \"geojson\",\n              data: { type: \"FeatureCollection\", features: [] },\n            });\n\n            map.addLayer({\n              id: \"bus\",\n              type: \"symbol\",\n              source: \"bus\",\n              layout: {\n                \"icon-image\": [\n                  \"case\",\n                  [\"==\", [\"get\", \"direction\"], \"WEST\"],\n                  \"bus\",\n                  [\"==\", [\"get\", \"direction\"], \"SOUTH\"],\n                  \"bus\",\n                  \"blue-bus\",\n                ],\n                \"icon-size\": [\n                  \"case\",\n                  [\"==\", [\"get\", \"direction\"], \"WEST\"],\n                  1.1,\n                  [\"==\", [\"get\", \"direction\"], \"SOUTH\"],\n                  1.1,\n                  0.4,\n                ],\n                \"icon-allow-overlap\": true,\n              },\n            });\n\n            map.addLayer(\n              {\n                id: \"satellite\",\n                source: \"satellite-map\",\n                type: \"raster\",\n                layout: {\n                  visibility: \"none\",\n                },\n              },\n              \"bus\"\n            );\n          }\n        );\n\n        map.on(\"zoom\", () => {\n          if (map.getZoom() > 13) {\n            map.setLayoutProperty(\"satellite\", \"visibility\", \"visible\");\n          } else {\n            map.setLayoutProperty(\"satellite\", \"visibility\", \"none\");\n          }\n        });\n\n        map.on(\"click\", \"bus\", function (e) {\n          map.flyTo({\n            center: e.features[0].geometry.coordinates,\n            speed: 0.3,\n          });\n        });\n\n        map.addControl(\n          new mapboxgl.GeolocateControl({\n            positionOptions: {\n              enableHighAccuracy: true,\n            },\n            trackUserLocation: true,\n          }),\n          \"top-left\"\n        );\n      });\n    };\n\n    if (!map) {\n      initializeMap({ setMap, mapContainer });\n    } else {\n      fetchBusRoute(map, currentRoute);\n    }\n  }, [currentRoute, fetchBusRoute, map]);\n\n  useInterval(() => {\n    if (map) fetchBusRoute(map, currentRoute);\n  }, 5000);\n\n  return <div ref={(el) => (mapContainer.current = el)} style={styles} />;\n};\n\nexport default Mapbox;\n","/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  option: {\n    fontSize: 15,\n    \"& > span\": {\n      marginRight: 10,\n      fontSize: 18,\n    },\n  },\n  autoCompleteStyle: {\n    backGround: \"red\",\n    position: \"absolute\",\n    zIndex: 1000,\n    background: \"#bfd5df\",\n    top: 10,\n    right: 15,\n    width: 200\n  },\n});\n\nconst SelectControl = ({ currentRoute, allRoutes, updateBusRoute }) => {\n  const classes = useStyles();\n  const [value, setValue] = useState(currentRoute);\n  const [options, setOptions] = useState(allRoutes);\n\n  useEffect(() => {\n    if (allRoutes.length > 0) setOptions(allRoutes);\n  }, [allRoutes]);\n\n  return (\n    <div className={classes.autoCompleteStyle}>\n      <Autocomplete\n        id=\"bus-select\"\n        style={{ width: 300 }}\n        options={options}\n        value={value}\n        classes={{\n          option: classes.option,\n        }}\n        autoHighlight\n        onChange={(event, val) => {\n          if (val === null) updateBusRoute(\"\");\n          else updateBusRoute(val.label);\n          setValue(val);\n        }}\n        getOptionLabel={(option) => (option === \"\" ? \"\" : option.label)}\n        renderOption={(option) => {\n          return <span>{option.label}</span>;\n        }}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Active bus\"\n            variant=\"outlined\"\n            inputProps={{\n              ...params.inputProps,\n              autoComplete: \"new-password\", // disable autocomplete and autofill\n            }}\n          />\n        )}\n      />\n    </div>\n  );\n};\n\nexport default SelectControl;\n","import React, { Component } from \"react\";\n\nimport Mapbox from \"./Mapbox\";\nimport SelectControl from \"./SelectControl\";\nimport translink_routes from \"../apis/translink_routes\";\n\nclass Main extends Component {\n  state = { currentRoute: \"\", availableRoutes: [\"99\", \"145\"], allRoutes: [] };\n\n  async componentDidMount() {\n    const allBuses = await translink_routes.get(\"\", {\n      params: { apikey: process.env.REACT_APP_TRANSLINK_API_KEY },\n    });\n    const activeBuses = allBuses\n      ? allBuses.data.map((bus) => {\n          return bus.RouteNo;\n        })\n      : [];\n\n    const uniqBuses = new Set(activeBuses);\n    const uniqBusLabels = [...uniqBuses].map((bus) => {\n      return { label: bus };\n    });\n\n    this.setState({ allRoutes: uniqBusLabels });\n  }\n\n  updateBusRoute = (route) => {\n    this.setState({ currentRoute: route });\n  };\n\n  render() {\n    return (\n      <>\n        <SelectControl\n          currentRoute={this.state.currentRoute}\n          allRoutes={this.state.allRoutes}\n          updateBusRoute={this.updateBusRoute}\n        />\n        <Mapbox currentRoute={this.state.currentRoute} />\n      </>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <>\n      <Main />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}